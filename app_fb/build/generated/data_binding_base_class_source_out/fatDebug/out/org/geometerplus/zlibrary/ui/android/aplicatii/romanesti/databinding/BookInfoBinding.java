// Generated by view binder compiler. Do not edit!
package org.geometerplus.zlibrary.ui.android.aplicatii.romanesti.databinding;

import android.view.LayoutInflater;
import android.view.View;
import android.view.ViewGroup;
import android.widget.Button;
import android.widget.ImageView;
import android.widget.LinearLayout;
import android.widget.RelativeLayout;
import android.widget.TextView;
import androidx.annotation.NonNull;
import androidx.annotation.Nullable;
import androidx.viewbinding.ViewBinding;
import androidx.viewbinding.ViewBindings;
import java.lang.NullPointerException;
import java.lang.Override;
import java.lang.String;
import org.geometerplus.zlibrary.ui.android.aplicatii.romanesti.R;

public final class BookInfoBinding implements ViewBinding {
  @NonNull
  private final RelativeLayout rootView;

  @NonNull
  public final BookInfoPairBinding bookAuthors;

  @NonNull
  public final ImageView bookCover;

  @NonNull
  public final TextView bookInfoAnnotationBody;

  @NonNull
  public final TextView bookInfoAnnotationTitle;

  @NonNull
  public final Button bookInfoButtonEdit;

  @NonNull
  public final Button bookInfoButtonOpen;

  @NonNull
  public final LinearLayout bookInfoButtonPanel;

  @NonNull
  public final Button bookInfoButtonReload;

  @NonNull
  public final RelativeLayout bookInfoRoot;

  @NonNull
  public final TextView bookInfoTitle;

  @NonNull
  public final BookInfoPairBinding bookLanguage;

  @NonNull
  public final BookInfoPairBinding bookSeries;

  @NonNull
  public final BookInfoPairBinding bookSeriesIndex;

  @NonNull
  public final BookInfoPairBinding bookTags;

  @NonNull
  public final BookInfoPairBinding bookTitle;

  @NonNull
  public final TextView fileInfoTitle;

  @NonNull
  public final BookInfoPairBinding fileName;

  @NonNull
  public final BookInfoPairBinding fileSize;

  @NonNull
  public final BookInfoPairBinding fileTime;

  @NonNull
  public final BookInfoPairBinding fileType;

  private BookInfoBinding(@NonNull RelativeLayout rootView,
      @NonNull BookInfoPairBinding bookAuthors, @NonNull ImageView bookCover,
      @NonNull TextView bookInfoAnnotationBody, @NonNull TextView bookInfoAnnotationTitle,
      @NonNull Button bookInfoButtonEdit, @NonNull Button bookInfoButtonOpen,
      @NonNull LinearLayout bookInfoButtonPanel, @NonNull Button bookInfoButtonReload,
      @NonNull RelativeLayout bookInfoRoot, @NonNull TextView bookInfoTitle,
      @NonNull BookInfoPairBinding bookLanguage, @NonNull BookInfoPairBinding bookSeries,
      @NonNull BookInfoPairBinding bookSeriesIndex, @NonNull BookInfoPairBinding bookTags,
      @NonNull BookInfoPairBinding bookTitle, @NonNull TextView fileInfoTitle,
      @NonNull BookInfoPairBinding fileName, @NonNull BookInfoPairBinding fileSize,
      @NonNull BookInfoPairBinding fileTime, @NonNull BookInfoPairBinding fileType) {
    this.rootView = rootView;
    this.bookAuthors = bookAuthors;
    this.bookCover = bookCover;
    this.bookInfoAnnotationBody = bookInfoAnnotationBody;
    this.bookInfoAnnotationTitle = bookInfoAnnotationTitle;
    this.bookInfoButtonEdit = bookInfoButtonEdit;
    this.bookInfoButtonOpen = bookInfoButtonOpen;
    this.bookInfoButtonPanel = bookInfoButtonPanel;
    this.bookInfoButtonReload = bookInfoButtonReload;
    this.bookInfoRoot = bookInfoRoot;
    this.bookInfoTitle = bookInfoTitle;
    this.bookLanguage = bookLanguage;
    this.bookSeries = bookSeries;
    this.bookSeriesIndex = bookSeriesIndex;
    this.bookTags = bookTags;
    this.bookTitle = bookTitle;
    this.fileInfoTitle = fileInfoTitle;
    this.fileName = fileName;
    this.fileSize = fileSize;
    this.fileTime = fileTime;
    this.fileType = fileType;
  }

  @Override
  @NonNull
  public RelativeLayout getRoot() {
    return rootView;
  }

  @NonNull
  public static BookInfoBinding inflate(@NonNull LayoutInflater inflater) {
    return inflate(inflater, null, false);
  }

  @NonNull
  public static BookInfoBinding inflate(@NonNull LayoutInflater inflater,
      @Nullable ViewGroup parent, boolean attachToParent) {
    View root = inflater.inflate(R.layout.book_info, parent, false);
    if (attachToParent) {
      parent.addView(root);
    }
    return bind(root);
  }

  @NonNull
  public static BookInfoBinding bind(@NonNull View rootView) {
    // The body of this method is generated in a way you would not otherwise write.
    // This is done to optimize the compiled bytecode for size and performance.
    int id;
    missingId: {
      id = R.id.book_authors;
      View bookAuthors = ViewBindings.findChildViewById(rootView, id);
      if (bookAuthors == null) {
        break missingId;
      }
      BookInfoPairBinding binding_bookAuthors = BookInfoPairBinding.bind(bookAuthors);

      id = R.id.book_cover;
      ImageView bookCover = ViewBindings.findChildViewById(rootView, id);
      if (bookCover == null) {
        break missingId;
      }

      id = R.id.book_info_annotation_body;
      TextView bookInfoAnnotationBody = ViewBindings.findChildViewById(rootView, id);
      if (bookInfoAnnotationBody == null) {
        break missingId;
      }

      id = R.id.book_info_annotation_title;
      TextView bookInfoAnnotationTitle = ViewBindings.findChildViewById(rootView, id);
      if (bookInfoAnnotationTitle == null) {
        break missingId;
      }

      id = R.id.book_info_button_edit;
      Button bookInfoButtonEdit = ViewBindings.findChildViewById(rootView, id);
      if (bookInfoButtonEdit == null) {
        break missingId;
      }

      id = R.id.book_info_button_open;
      Button bookInfoButtonOpen = ViewBindings.findChildViewById(rootView, id);
      if (bookInfoButtonOpen == null) {
        break missingId;
      }

      id = R.id.book_info_button_panel;
      LinearLayout bookInfoButtonPanel = ViewBindings.findChildViewById(rootView, id);
      if (bookInfoButtonPanel == null) {
        break missingId;
      }

      id = R.id.book_info_button_reload;
      Button bookInfoButtonReload = ViewBindings.findChildViewById(rootView, id);
      if (bookInfoButtonReload == null) {
        break missingId;
      }

      RelativeLayout bookInfoRoot = (RelativeLayout) rootView;

      id = R.id.book_info_title;
      TextView bookInfoTitle = ViewBindings.findChildViewById(rootView, id);
      if (bookInfoTitle == null) {
        break missingId;
      }

      id = R.id.book_language;
      View bookLanguage = ViewBindings.findChildViewById(rootView, id);
      if (bookLanguage == null) {
        break missingId;
      }
      BookInfoPairBinding binding_bookLanguage = BookInfoPairBinding.bind(bookLanguage);

      id = R.id.book_series;
      View bookSeries = ViewBindings.findChildViewById(rootView, id);
      if (bookSeries == null) {
        break missingId;
      }
      BookInfoPairBinding binding_bookSeries = BookInfoPairBinding.bind(bookSeries);

      id = R.id.book_series_index;
      View bookSeriesIndex = ViewBindings.findChildViewById(rootView, id);
      if (bookSeriesIndex == null) {
        break missingId;
      }
      BookInfoPairBinding binding_bookSeriesIndex = BookInfoPairBinding.bind(bookSeriesIndex);

      id = R.id.book_tags;
      View bookTags = ViewBindings.findChildViewById(rootView, id);
      if (bookTags == null) {
        break missingId;
      }
      BookInfoPairBinding binding_bookTags = BookInfoPairBinding.bind(bookTags);

      id = R.id.book_title;
      View bookTitle = ViewBindings.findChildViewById(rootView, id);
      if (bookTitle == null) {
        break missingId;
      }
      BookInfoPairBinding binding_bookTitle = BookInfoPairBinding.bind(bookTitle);

      id = R.id.file_info_title;
      TextView fileInfoTitle = ViewBindings.findChildViewById(rootView, id);
      if (fileInfoTitle == null) {
        break missingId;
      }

      id = R.id.file_name;
      View fileName = ViewBindings.findChildViewById(rootView, id);
      if (fileName == null) {
        break missingId;
      }
      BookInfoPairBinding binding_fileName = BookInfoPairBinding.bind(fileName);

      id = R.id.file_size;
      View fileSize = ViewBindings.findChildViewById(rootView, id);
      if (fileSize == null) {
        break missingId;
      }
      BookInfoPairBinding binding_fileSize = BookInfoPairBinding.bind(fileSize);

      id = R.id.file_time;
      View fileTime = ViewBindings.findChildViewById(rootView, id);
      if (fileTime == null) {
        break missingId;
      }
      BookInfoPairBinding binding_fileTime = BookInfoPairBinding.bind(fileTime);

      id = R.id.file_type;
      View fileType = ViewBindings.findChildViewById(rootView, id);
      if (fileType == null) {
        break missingId;
      }
      BookInfoPairBinding binding_fileType = BookInfoPairBinding.bind(fileType);

      return new BookInfoBinding((RelativeLayout) rootView, binding_bookAuthors, bookCover,
          bookInfoAnnotationBody, bookInfoAnnotationTitle, bookInfoButtonEdit, bookInfoButtonOpen,
          bookInfoButtonPanel, bookInfoButtonReload, bookInfoRoot, bookInfoTitle,
          binding_bookLanguage, binding_bookSeries, binding_bookSeriesIndex, binding_bookTags,
          binding_bookTitle, fileInfoTitle, binding_fileName, binding_fileSize, binding_fileTime,
          binding_fileType);
    }
    String missingId = rootView.getResources().getResourceName(id);
    throw new NullPointerException("Missing required view with ID: ".concat(missingId));
  }
}
